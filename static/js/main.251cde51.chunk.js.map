{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","username","email","id","className","alt","src","CardList","robots","CardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAKC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GAEhC,OACE,sBAAKC,UAAU,mDAAf,UACO,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACzB,sBAAKC,UAAU,KAAf,UACG,6BAAKH,IACL,6BAAKD,IACL,4BAAIE,WCcDK,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACC,cAAC,EAAD,CAEGT,GAAIK,EAAOI,GAAGT,GACdH,KAAMQ,EAAOI,GAAGZ,KAChBC,SAAUO,EAAOI,GAAGX,SACpBC,MAAOM,EAAOI,GAAGV,OAJZU,MASb,OACI,8BACAH,KCHOI,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAU,KAAf,SACA,uBACAA,UAAU,qCACTY,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCCLI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,SAAxC,SACKH,EAAMI,YCiBHC,E,kDAnBX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHA,E,8DAOLC,EAAOC,GACzBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIhB,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKV,MAAMI,a,GAhBEQ,aCgDbC,G,wDA1CX,aAAgB,IAAD,8BACX,gBAgBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACjB,YAAcqB,EAAMC,OAAOC,SAhB1C,EAAKX,MAAQ,CACTlB,OAAO,GACPM,YAAa,IAJN,E,gEAQM,IAAD,OAEhBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,+BAU/B,IAAD,EACwBZ,KAAKJ,MAA5BlB,EADD,EACCA,OAAQM,EADT,EACSA,YACT6B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,SAAS6C,cAAcC,SAASjC,EAAYgC,kBAE7D,OAAQtC,EAAOwC,OAGX,sBAAK5C,UAAU,KAAf,UACA,oBAAIA,UAAU,QAAd,yBACA,cAAC,EAAD,CAAWW,aAAgBe,KAAKI,iBAChC,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,OAAQmC,WAPnB,6C,GA7BOX,cCAlBiB,IAASC,OAER,cAAC,EAAD,IAASC,SAASC,eAAe,SP0H5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.251cde51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ( {name,username,email,id} ) => {\n   \n    return (\n      <div className='bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5 '>\n             <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n         <div className='tc'>\n            <h2>{username}</h2>\n            <h3>{name}</h3>\n            <p>{email}</p>\n          </div>\n          </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const CardComponent = robots.map((user,i) =>{\n        return ( \n         <Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            username={robots[i].username} \n            email={robots[i].email}\n\n            />\n        );\n    });\n    return(\n        <div>\n       {CardComponent}\n       \n    </div>\n\n    );\n}\nexport default CardList; ","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='tc'>\n        <input\n        className='pa3 tc ba b--pink bg-lightest-blue'\n         type='search'\n         placeholder='search robots'\n         onChange= {searchChange}\n         />\n         </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll' ,height:'496px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default scroll;"," import React,{Component} from 'react';\n\n class ErrorBoundry extends Component {\n     constructor(props){\n         super(props);\n         this.state = {\n             hasError: false\n         }\n     }\n\ncomponentDidCatch(error, info) {\nthis.setState({hasError:true})\n}\n\n     render (){\n        if(this.state.hasError) {\n            return <h1>Ops that is not good</h1>\n        }\n        return this.props.children\n     }\n }\n\n export default ErrorBoundry;\n\n","import React, {Component} from 'react'; \nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component  {\n    constructor () {\n        super()\n        this.state = {\n            robots:[],\n            searchfield: ''\n        }  \n    }\n\n    componentDidMount() {\n\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}));\n       \n\n    }\n\n    onSearchChange = (event) =>  {\n        this.setState({searchfield : event.target.value})\n        \n        \n    }\n    render () {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.username.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ?\n           <h1>Loading</h1> :\n             (\n            <div className=\"tc\">\n            <h1 className='tc f1'>RoboFriends</h1>\n            <SearchBox searchChange = {this.onSearchChange}/>\n            <Scroll>\n            <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n            </Scroll>\n            </div>\n        );\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n\n <App />, document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}